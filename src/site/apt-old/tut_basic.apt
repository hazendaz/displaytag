~~
~~ Copyright (C) 2002-2024 Fabrizio Giustina, the Displaytag team
~~
~~ Permission is hereby granted, free of charge, to any person obtaining a copy
~~ of this software and associated documentation files (the "Software"), to deal
~~ in the Software without restriction, including without limitation the rights
~~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
~~ copies of the Software, and to permit persons to whom the Software is
~~ furnished to do so, subject to the following conditions:
~~
~~ The above copyright notice and this permission notice shall be included in
~~ all copies or substantial portions of the Software.
~~
~~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
~~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
~~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
~~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
~~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
~~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
~~ THE SOFTWARE.
~~

                                    ------------------------------
                                       Simplest case, no columns
                                    ------------------------------
                                          Fabrizio Giustina
                                    ------------------------------
                                              11-11-2005
                                    ------------------------------

Simplest case, no columns

* Basic table

[images/tut_basic.png] display:table

+-------------------------------------------------------------------+
<% request.setAttribute( "test", new TestList(10, false) ); %>

<display:table name="test" />
+-------------------------------------------------------------------+

   The simplest possible usage of the table tag is to point the table
   tag at a <<<java.util.List>>> implementation and do nothing else. The
   table tag will iterate through the list and display a column for
   each property contained in the objects.

   Typically, the only time that you would want to use the tag in this
   simple way would be during development as a sanity check. For
   production, you should always define at least a single column.

* Basic, columns

[images/tut_columns.png] display:table with columns

+-------------------------------------------------------------------+
<% request.setAttribute( "test", new TestList(10, false) ); %>

<display:table name="test">
  <display:column property="id" title="ID" />
  <display:column property="name" />
  <display:column property="email" />
  <display:column property="status" />
  <display:column property="description" title="Comments"/>
</display:table>
+-------------------------------------------------------------------+


   This example starts to show you how to use the table tag. You point
   the table tag at a datasource (a List), then define a number of
   columns with properties that map to accessor methods (getXXX) for
   each object in the List.

   Note that you have one column tag for every column that you want to
   appear in the table. And, the column specifies what property is
   shown in that particular row.

   You can define the content of a column by adding a property
   attribute to the column tag or adding a content to the tag.

---------------------------------------------------------------------
   <display:column property="email" />
   <display:column title="email">email@it.com</display:column>
---------------------------------------------------------------------

   There are two ways to define the content of a column. Of course, in
   the tag body you can use scriptlets or other custom tags. Using the
   property attribute to define the content of a column is usually
   faster and works better with sorting. If you add a property
   attribute the tag body is ignored.

   Adding content in the column body you can easily concatenate or
   "decorate" fields available in objects in the list. See the
   {{{tut_implicitobjects.html}implicit objects}} chapter for more details.

   The property attribute specifies what getXXX method is called on
   each item in the list. So for the second column, getName is called.
   By default the property name is used as the header of the column
   unless you explicitly give the column a title.
